一、Spring Boot 头部部分
1. SpringBoot启动类配置
Java 语言

收起

自动换行

复制
@SpringBootApplication
@MapperScan("com.farm.ecommerce.dao")
@EnableCaching // 启用缓存支持
public class FarmEcommerceApplication {
    public static void main(String[] args) {
        SpringApplication.run(FarmEcommerceApplication.class, args);
        System.out.println("Farm Ecommerce Application Started Successfully!");
    }

    // 配置跨域支持
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/api/**")
                        .allowedOrigins("*")
                        .allowedMethods("GET", "POST", "PUT", "DELETE")
                        .allowedHeaders("*");
            }
        };
    }
}
2.数据库配置（application.yml）
yaml

收起

自动换行

复制
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/farm_ecommerce?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari: # 添加连接池配置
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 30000

  redis:
    host: localhost
    port: 6379
    password: 
    database: 0
    lettuce: # 优化Redis连接池
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 添加SQL日志

# 日志配置
logging:
  level:
    com.farm.ecommerce: debug
3.商品实体类设计(Product.java)
Java 语言

收起

自动换行

复制
@Data
@TableName("product")
public class Product implements Serializable {
    private static final long serialVersionUID = 1L;

    @TableId(type = IdType.AUTO)
    private Long id;

    @NotBlank(message = "商品名称不能为空")
    private String name;

    @NotNull(message = "分类ID不能为空")
    private Long categoryId;

    @NotNull(message = "农户ID不能为空")
    private Long farmerId;

    private String description;

    @NotNull(message = "价格不能为空")
    @DecimalMin(value = "0.01", message = "价格必须大于0")
    private BigDecimal price;

    private BigDecimal originalPrice;

    @NotNull(message = "库存不能为空")
    @Min(value = 0, message = "库存不能为负数")
    private Integer stock;

    private Integer sales = 0;

    private String mainImage;
    private String subImages;

    private Integer status = 1; // 默认上架
    private Integer isHot = 0;  // 默认非热销
    private Integer isRecommend = 0; // 默认非推荐

    @TableField(fill = FieldFill.INSERT)
    private Date createTime;

    @TableField(fill = FieldFill.INSERT_UPDATE)
    private Date updateTime;

    @TableField(exist = false)
    private List<ProductSpec> specs;

    @TableField(exist = false)
    private Farmer farmer;

    // 添加校验方法
    public void validate() {
        if (price != null && originalPrice != null && price.compareTo(originalPrice) > 0) {
            throw new IllegalArgumentException("现价不能高于原价");
        }
    }
}
4.商品服务接口和实现（ProductService & ProductServiceImpl）
Java 语言

收起

自动换行

复制
// ProductService.java
public interface ProductService extends IService<Product> {
    IPage<Product> page(Page<Product> page, QueryWrapper<Product> queryWrapper);
    Product getProductDetail(Long id);
    void createProduct(ProductDTO productDTO);
}

// ProductServiceImpl.java
@Service
public class ProductServiceImpl extends ServiceImpl<ProductMapper, Product> implements ProductService {
    @Autowired
    private ProductMapper productMapper;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    @Override
    @Cacheable(value = "productPage", key = "#page.current + '-' + #page.size + '-' + #queryWrapper.hashCode()")
    public IPage<Product> page(Page<Product> page, QueryWrapper<Product> queryWrapper) {
        return productMapper.selectPage(page, queryWrapper);
    }

    @Override
    @Cacheable(value = "productDetail", key = "#id")
    public Product getProductDetail(Long id) {
        Product product = productMapper.selectById(id);
        if (product != null && product.getStatus() == 1) {
            // 加载关联信息
            product.setSpecs(productMapper.selectSpecsByProductId(id));
            product.setFarmer(productMapper.selectFarmerById(product.getFarmerId()));
            return product;
        }
        return null;
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    @CacheEvict(value = {"productPage", "productDetail"}, allEntries = true)
    public void createProduct(ProductDTO productDTO) {
        Product product = new Product();
        BeanUtils.copyProperties(productDTO, product);
        product.validate();
        
        // 处理图片上传逻辑（假设使用云存储）
        if (productDTO.getMainImageFile() != null) {
            String imageUrl = uploadFile(productDTO.getMainImageFile());
            product.setMainImage(imageUrl);
        }
        
        productMapper.insert(product);
    }

    private String uploadFile(MultipartFile file) {
        // 实现文件上传逻辑，例如上传到阿里云OSS
        return "https://example.com/uploaded_image.jpg";
    }
}
5.商品控制器实现(ProductController.java)
Java 语言

收起

自动换行

复制
@RestController
@RequestMapping("/api/product")
@Api(tags = "商品管理")
public class ProductController {
    @Autowired
    private ProductService productService;

    @GetMapping("/list")
    @ApiOperation("获取商品列表")
    public R list(
            @RequestParam(required = false) Long categoryId,
            @RequestParam(required = false) String keyword,
            @RequestParam(defaultValue = "1") @Min(1) Integer pageNum,
            @RequestParam(defaultValue = "10") @Min(1) @Max(50) Integer pageSize,
            @RequestParam(required = false) Integer isHot,
            @RequestParam(required = false) Integer isRecommend) {
        try {
            Page<Product> page = new Page<>(pageNum, pageSize);
            QueryWrapper<Product> queryWrapper = new QueryWrapper<>();

            if (categoryId != null) queryWrapper.eq("category_id", categoryId);
            if (StringUtils.isNotBlank(keyword)) queryWrapper.like("name", keyword);
            if (isHot != null) queryWrapper.eq("is_hot", isHot);
            if (isRecommend != null) queryWrapper.eq("is_recommend", isRecommend);
            queryWrapper.eq("status", 1).orderByDesc("create_time");

            IPage<Product> pageResult = productService.page(page, queryWrapper);
            return R.ok().put("data", pageResult);
        } catch (Exception e) {
            log.error("获取商品列表失败", e);
            return R.error("获取商品列表失败");
        }
    }

    @GetMapping("/detail/{id}")
    @ApiOperation("获取商品详情")
    public R detail(@PathVariable @NotNull Long id) {
        Product product = productService.getProductDetail(id);
        return product != null ? R.ok().put("data", product) : R.error("商品不存在");
    }

    @PostMapping("/create")
    @ApiOperation("创建商品")
    @RequiresRoles("farmer")
    public R create(@Valid @RequestBody ProductDTO productDTO, @AuthenticationPrincipal UserDetails user) {
        try {
            productDTO.setFarmerId(Long.valueOf(user.getUsername())); // 设置当前登录农户ID
            productService.createProduct(productDTO);
            return R.ok("商品创建成功");
        } catch (Exception e) {
            log.error("创建商品失败", e);
            return R.error("创建商品失败");
        }
    }
}
6. ProductDTO（用于创建商品的数据传输对象）
Java 语言

收起

自动换行

复制
@Data
public class ProductDTO {
    @NotBlank
    private String name;
    @NotNull
    private Long categoryId;
    private Long farmerId;
    private String description;
    @NotNull
    private BigDecimal price;
    private BigDecimal originalPrice;
    @NotNull
    private Integer stock;
    private MultipartFile mainImageFile;
    private List<String> subImages;
}
二、微信小程序前端部分
5.微信小程序首页实现（index.js）
JavaScript的

收起

自动换行

复制
// pages/index/index.js
Page({
  data: {
    banners: [],
    categories: [],
    hotProducts: [],
    recommendProducts: [],
    loading: false,
    error: null
  },

  onLoad() {
    this.loadData();
  },

  onPullDownRefresh() {
    this.loadData(true);
  },

  loadData(refresh = false) {
    if (this.data.loading) return;
    this.setData({ loading: true, error: null });

    Promise.all([
      this.fetchData('banner/list', 'banners'),
      this.fetchData('category/list', 'categories'),
      this.fetchData('product/list?isHot=1&pageSize=4', 'hotProducts', 'records'),
      this.fetchData('product/list?isRecommend=1&pageSize=8', 'recommendProducts', 'records')
    ])
      .then(() => {
        this.setData({ loading: false });
        refresh && wx.stopPullDownRefresh();
      })
      .catch(err => {
        this.setData({ loading: false, error: err.message });
        wx.showToast({ title: '加载失败', icon: 'none' });
        refresh && wx.stopPullDownRefresh();
      });
  },

  fetchData(urlPath, dataKey, subKey = 'data') {
    return new Promise((resolve, reject) => {
      wx.request({
        url: `https://your-api.com/api/${urlPath}`,
        success: (res) => {
          if (res.statusCode === 200 && res.data.code === 0) {
            this.setData({ [dataKey]: res.data[subKey] });
            resolve();
          } else {
            reject(new Error(res.data.msg || '请求失败'));
          }
        },
        fail: () => reject(new Error('网络错误'))
      });
    });
  },

  navigateToProduct(e) {
    const id = e.currentTarget.dataset.id;
    wx.navigateTo({ url: `/pages/product/detail?id=${id}` });
  },

  navigateToCategory() {
    wx.switchTab({ url: '/pages/category/index' });
  }
});
WXML (索引.wxml)
html

收起

自动换行

复制
<!-- pages/index/index.wxml -->
<view class="container">
  <view wx:if="{{loading}}">加载中...</view>
  <view wx:if="{{error}}" class="error">{{error}}</view>

  <!-- 轮播图 -->
  <swiper indicator-dots autoplay circular>
    <swiper-item wx:for="{{banners}}" wx:key="id">
      <image src="{{item.image}}" mode="aspectFill" bindtap="navigateToProduct" data-id="{{item.productId}}"/>
    </swiper-item>
  </swiper>

  <!-- 分类 -->
  <view class="categories">
    <view wx:for="{{categories}}" wx:key="id" class="category-item" bindtap="navigateToCategory">
      <image src="{{item.icon}}" />
      <text>{{item.name}}</text>
    </view>
  </view>

  <!-- 热销商品 -->
  <view class="section">
    <text class="title">热销推荐</text>
    <view class="product-list">
      <view wx:for="{{hotProducts}}" wx:key="id" class="product-item" bindtap="navigateToProduct" data-id="{{item.id}}">
        <image src="{{item.mainImage}}" mode="aspectFill"/>
        <text>{{item.name}}</text>
        <text class="price">¥{{item.price}}</text>
      </view>
    </view>
  </view>

  <!-- 推荐商品 -->
  <view class="section">
    <text class="title">为您推荐</text>
    <view class="product-list">
      <view wx:for="{{recommendProducts}}" wx:key="id" class="product-item" bindtap="navigateToProduct" data-id="{{item.id}}">
        <image src="{{item.mainImage}}" mode="aspectFill"/>
        <text>{{item.name}}</text>
        <text class="price">¥{{item.price}}</text>
      </view>
    </view>
  </view>
</view>
WXSS (索引.wxss)
样式表

收起

自动换行

复制
/* pages/index/index.wxss */
.container { padding: 20rpx; }
swiper { height: 300rpx; }
swiper image { width: 100%; height: 100%; }
.categories { display: flex; flex-wrap: wrap; margin: 20rpx 0; }
.category-item { width: 25%; text-align: center; }
.category-item image { width: 80rpx; height: 80rpx; }
.section { margin: 20rpx 0; }
.title { font-size: 32rpx; font-weight: bold; margin-bottom: 20rpx; }
.product-list { display: flex; flex-wrap: wrap; }
.product-item { width: 48%; margin: 1%; }
.product-item image { width: 100%; height: 200rpx; }
.price { color: #ff6700; font-weight: bold; }
.error { color: red; text-align: center; }